(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{367:function(n,e,t){"use strict";t.r(e);var a=t(42),i=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"electron"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron"}},[n._v("#")]),n._v(" Electron")]),n._v(" "),t("p",[n._v("随着前端快速的发展，在任何开发领域都有前端的一席之地。那如何使用前端进行桌面端应用的开发呢？Electron 是一个不错的选择。")]),n._v(" "),t("p",[n._v("Electron 是什么呢?")]),n._v(" "),t("p",[n._v("Electron 就是使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序.")]),n._v(" "),t("ul",[t("li",[n._v("Electron 是由 github 开发的开源框架")]),n._v(" "),t("li",[n._v("它允许开发者使用 web 技术开发跨平台的桌面应用")])]),n._v(" "),t("p",[n._v("Electron = Chromium + Node.js + Native API")]),n._v(" "),t("ul",[t("li",[n._v("Chromium：提供了强大的 ui 能力，利用强大的 web 生态来开发界面。")]),n._v(" "),t("li",[n._v("Node.js：让 Electron 有了底层才做能力，比如读写能力，并且可以使用大量的开源包来完成项目的开发。")]),n._v(" "),t("li",[n._v("Native API：让 Electron 有了跨平台和桌面端的原生能力，比如有同意的原生界面、窗口、托盘。")])]),n._v(" "),t("p",[n._v("今天我们就来看看如何从零开始学习 electron，用前端技术构建的桌面应用程序")]),n._v(" "),t("h2",{attrs:{id:"创建第一个-electron-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建第一个-electron-应用"}},[n._v("#")]),n._v(" 创建第一个 Electron 应用")]),n._v(" "),t("ol",[t("li",[n._v("新建文件夹(命名记得不要出现中文)，初始化项目")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('npm init\n会生成package.json 文件\n文件内容如下\n\n{\n  "name": "test",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "",\n  "license": "ISC"\n}\n别急\nnpm init 以后会让我们填写一些配置信息，不知道如何填写一路回车即可\n当然也可以执行 npm init -y\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("安装 electron\n"),t("blockquote",[t("p",[n._v("npm install --save-dev electron")])])])]),n._v(" "),t("p",[n._v("如果安装的时候遇到什么问题(大部分报错或太慢)可以看看 npm 是否切换了淘宝镜像")]),n._v(" "),t("blockquote",[t("p",[n._v("npm config set registry https://registry.npm.taobao.org")])]),n._v(" "),t("p",[n._v("也可以配置一下 electron 镜像")]),n._v(" "),t("blockquote",[t("p",[n._v("npm config set ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/")])]),n._v(" "),t("p",[n._v("我们来测试一下"),t("code",[n._v("electron")]),n._v("是否安装成功")]),n._v(" "),t("p",[n._v("安装成功我们能看到 electron 的窗口打开")]),n._v(" "),t("blockquote",[t("p",[n._v("命令行内执行 npx electron")])]),n._v(" "),t("p",[n._v("看看 electron 的版本号")]),n._v(" "),t("blockquote",[t("p",[n._v("npx electron -v")])]),n._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[n._v("根目录下创建 main.js 文件(主进程)\nelectron 主进程")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { app, BrowserWindow } = require('electron');\nlet mainWindow = null;\n\napp.on('ready', () => {\n    mainWindow = new BrowserWindow({    // 创建和控制浏览器窗口\n        width: 800,                     // 窗口宽度\n        height: 600,                    // 窗口高度\n        webPreferences: {               // 网页功能设置\n            nodeIntegration: true,      // 是否在node工作器中启用工作集成默认false\n            enableRemoteModule: true,   // 是否启用remote模块默认false\n        }\n    });\n    mainWindow.loadFile('index.html');  // 加载页面\n    mainWindow.on('close', () => {      // 监听窗口关闭\n        mainWindow = null\n    })\n\n})\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[n._v("根目录下创建 index.html （需要加载的页面）")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n\n<body>\n    <button id="btn">\n        点击弹窗\n    </button>\n    <script src="./render/index2.js"><\/script>\n</body>\n\n</html>\n\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[n._v("修改 paceage.json 文件中的 main 的值，"),t("code",[n._v("main")]),n._v("表示需要启动的脚本，\n将 scripts 的 test 修改为自己需要的名字或者只修改 test 的值")])]),n._v(" "),t("blockquote",[t("p",[n._v("修改为如下")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('{\n  "name": "test",\n  "version": "1.0.0",\n  "description": "",\n  "main": "main.js",\n  "scripts": {\n    "start": "electron .",\n  },\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n  }\n}\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[n._v("仅接着\n"),t("blockquote",[t("p",[n._v("npm run start\n好的我们的第一个 electron 运行起来了")])])])]),n._v(" "),t("h2",{attrs:{id:"electron-的运行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron-的运行流程"}},[n._v("#")]),n._v(" electron 的运行流程")]),n._v(" "),t("ol",[t("li",[n._v("读取 package.json 文件中的入口文件，这里就是我们的 main.js")]),n._v(" "),t("li",[n._v("main.js 中我们引入"),t("code",[n._v("electron")]),n._v(" 创建了渲染进程")]),n._v(" "),t("li",[n._v("index.html 就是应用页面的布局和样式")]),n._v(" "),t("li",[n._v("使用 IPC 在主进程执行任务并获取信息")])]),n._v(" "),t("p",[n._v("可能上面的前三点都能明白，但是第四点不知道是什么，没事我们现在只要知道他的运行流程即可内部实现先不做深究。")]),n._v(" "),t("p",[n._v("现在我们只需要知道"),t("code",[n._v("main.js")]),n._v("是主进程，"),t("code",[n._v("index.html")]),n._v("是渲染进程即可。")]),n._v(" "),t("h2",{attrs:{id:"试试-node-js-的读取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#试试-node-js-的读取"}},[n._v("#")]),n._v(" 试试 node.js 的读取")]),n._v(" "),t("p",[n._v("我们先将目录结构规划一下")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("─package-lock.json\n├─package.json\n├─src\n|  ├─main.js\n|  ├─render\n|  |   ├─index.html\n|  |   ├─text.txt\n|  |   ├─yellow.html\n|  |   ├─js\n|  |   | ├─index.js\n")])])]),t("p",[n._v("简单的划分后我们来看看是如何读取文件")]),n._v(" "),t("ol",[t("li",[n._v("我们在 render 目录下创建一个 test.txt 文件，里面写上"),t("code",[n._v("被读取到啦")]),n._v("。")]),n._v(" "),t("li",[n._v("接着在 render 中创建一个 js 文件夹在 js 文件夹内创建 index.js 文件。")]),n._v(" "),t("li",[n._v("在 index.html 中添加一个按钮，添加一个 div 标签(用于显示内容)，并且引入"),t("code",[n._v("index.js")]),n._v("。")]),n._v(" "),t("li",[n._v("接着在"),t("code",[n._v("index.js")]),n._v("中获取按钮元素，读取 test.txt 文件内容")])]),n._v(" "),t("p",[n._v("代码如下：")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <button id="btn">点击获取文件信息</button>\n    <div id="filesData"></div>\n    <script src="./js/index.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// read\nconst fs = require('fs');\nconst path = require('path')\n\nconst btnRead = document.querySelector('#btnRead');\nconst filesDaata = document.querySelector('#filesData');\nconst btnWrite = document.querySelector('#btnWrite');\n\n\nwindow.onload = ()=>{\n    btnRead.onclick = () => {\n        fs.readFile(path.join(__dirname, 'text.txt'),(err,data)=>{\n            console.log(data);\n            filesDaata.innerHTML = data\n        })\n    }\n    btnWrite.onclick = () => {\n        fs.writeFile(path.join(__dirname,'text.txt'),'添加1111', 'utf8',err=>{\n            console.log(err)\n        })\n    }\n}\n\n")])])]),t("p",[t("code",[n._v("main.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const { app, BrowserWindow } = require("electron");\nlet mainWindow = null;\n\napp.on("ready", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      enableRemoteModule: true,\n    },\n  });\n  mainWindow.loadFile(require(\'path\').join(__dirname, \'./render/index.html\'));\n  mainWindow.on("close", () => {\n    mainWindow = null;\n  });\n});\n')])])]),t("p",[n._v("上面就是利用了 node.js 的读写取能力。")]),n._v(" "),t("h2",{attrs:{id:"remote-模块的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remote-模块的使用"}},[n._v("#")]),n._v(" remote 模块的使用")]),n._v(" "),t("p",[n._v("说"),t("code",[n._v("Remote")]),n._v("之前我们要明确一点，当我们知道了 Electron 是分"),t("code",[n._v("主进程")]),n._v("、"),t("code",[n._v("渲染进程")]),n._v("后，还需要知道 Electron 的 API 方法和模块也是分"),t("code",[n._v("主进程")]),n._v("、"),t("code",[n._v("渲染进程")]),n._v("。")]),n._v(" "),t("p",[n._v("回到我们"),t("code",[n._v("Remote")]),n._v("的使用")]),n._v(" "),t("ul",[t("li",[n._v("Remote 是渲染进程（web 页面）和主进程通信（IPC）提供一种简单的方法。")])]),n._v(" "),t("ol",[t("li",[n._v("在 index.html 中写上一个按钮，通过点击事件创建一个新的窗口")]),n._v(" "),t("li",[n._v("创建一个"),t("code",[n._v("yellow.html")]),n._v("用作新建窗口的渲染进程\n"),t("blockquote",[t("p",[n._v("代码如下")])])])]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <button id="btn">\n        打开新窗口\n    </button>\n    <script src="./js/index.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("yellow.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    我是新建的窗口\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 创建新窗口\n// remote\nconst BrowserWindow = require('electron').remote.BrowserWindow;\nconst btn = document.querySelector('#btn');\nwindow.onload = ()=>{\n\n    btn.onclick = ()=>{\n        newWindow = new BrowserWindow({\n            width: 300,\n            height:300,\n        })\n        newWindow.loadFile(require(\"path\").join(__dirname, 'yellow.html'));\n        newWindow.on('close',()=>{\n            newWindow = null;\n        })\n    }\n}\n")])])]),t("p",[t("code",[n._v("main.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const { app, BrowserWindow } = require("electron");\nlet mainWindow = null;\n\napp.on("ready", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      enableRemoteModule: true,\n    },\n  });\n  mainWindow.loadFile(require(\'path\').join(__dirname, \'./render/index.html\'));\n  mainWindow.on("close", () => {\n    mainWindow = null;\n  });\n});\n')])])]),t("p",[n._v("好滴，新建窗口完成啦，别急，我们看看"),t("code",[n._v("主进程")]),n._v("中的一段代码在"),t("code",[n._v("webPreferences")]),n._v(" 里写了一句"),t("code",[n._v("enableRemoteModule: true")]),n._v(" 。")]),n._v(" "),t("blockquote",[t("p",[n._v("这是"),t("code",[n._v("Electron")]),n._v("版本更新后修改的，默认不启用 remote 模块需要手动打开,别忘记了")])]),n._v(" "),t("h2",{attrs:{id:"创建菜单以及基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建菜单以及基本使用"}},[n._v("#")]),n._v(" 创建菜单以及基本使用")]),n._v(" "),t("ol",[t("li",[n._v("新建 main 文件夹，在文件夹新建 menu.js")]),n._v(" "),t("li",[n._v("在主线程中银日 menu.jsm")])]),n._v(" "),t("blockquote",[t("p",[n._v("注意 Menu 属于主线程下的模块，所以只能在主线程下使用。")])]),n._v(" "),t("p",[n._v("代码如下：")]),n._v(" "),t("p",[t("code",[n._v("menu.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const {Menu} = require('electron');\n\nconst  temlpate = [\n    {\n        label: '第一项',\n        submenu:[\n            {label: '1.1'},\n            {label: '1.2'}\n        ]\n    },\n    {\n        label: '第二项',\n        submenu:[\n            {label:'2.1'},\n            {label:'2.2'}\n        ]\n    }\n]\n\nconst menu = Menu.buildFromTemplate(temlpate);\nMenu.setApplicationMenu(menu);\n")])])]),t("p",[t("code",[n._v("main.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { app, BrowserWindow } = require(\"electron\");\nlet mainWindow = null;\nrequire('./main/menu')\n\napp.on(\"ready\", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      // enableRemoteModule: true,\n    },\n  });\n  mainWindow.loadFile(require('path').join(__dirname, './render/index.html'));\n  mainWindow.on(\"close\", () => {\n    mainWindow = null;\n  });\n});\n\n")])])]),t("p",[n._v("既然是菜单那么当然是可以点击的，看看菜单中如何点击")]),n._v(" "),t("p",[t("code",[n._v("menu.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const { Menu, BrowserWindow } = require("electron");\n\nconst temlpate = [\n  {\n    label: "第一项",\n    submenu: [\n      {\n        label: "1.1",\n        click: () => {\n          let win = new BrowserWindow({\n            width: 300,\n            height: 300,\n          });\n          win.loadFile(require(\'path\').join(__dirname,\'../render/yellow.html\'));\n          win.on(\'close\',()=>{\n              win = null;\n          })\n        },\n      },\n      { label: "1.2" },\n    ],\n  },\n  {\n    label: "第二项",\n    submenu: [{ label: "2.1" }, { label: "2.2" }],\n  },\n];\n\nconst menu = Menu.buildFromTemplate(temlpate);\nMenu.setApplicationMenu(menu);\n')])])]),t("p",[n._v("我们还能通过快捷键实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const { Menu, BrowserWindow } = require("electron");\n\nconst temlpate = [\n  {\n    label: "第一项",\n    submenu: [\n      {\n        label: "1.1",\n        accelerator:`crtl+n`,\n        click: () => {\n          let win = new BrowserWindow({\n            width: 300,\n            height: 300,\n          });\n          win.loadFile(require(\'path\').join(__dirname,\'../render/yellow.html\'));\n          win.on(\'close\',()=>{\n              win = null;\n          })\n        },\n      },\n      { label: "1.2" },\n    ],\n  },\n  {\n    label: "第二项",\n    submenu: [{ label: "2.1" }, { label: "2.2" }],\n  },\n];\n\nconst menu = Menu.buildFromTemplate(temlpate);\nMenu.setApplicationMenu(menu);\n')])])]),t("h2",{attrs:{id:"右键菜单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#右键菜单"}},[n._v("#")]),n._v(" 右键菜单")]),n._v(" "),t("p",[n._v("右键是在渲染进程进行点击的，因此写在渲染进程中，且要用到"),t("code",[n._v("remote")]),n._v("模块")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <button id="btn">\n        打开新窗口\n    </button>\n    <script src="./js/index3.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index3.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 复制粘贴\nconst { remote } = require('electron');\n\nconst rightTemplate = [\n    {label:'粘贴'},\n    {label:'复制'},\n]\nconst menu = remote.Menu.buildFromTemplate(rightTemplate);\n\nwindow.addEventListener('contextmenu',(e)=>{\n    // 阻止当前窗口默认事件\n    e.preventDefault();\n    //把菜单模板添加到右键菜单\n    menu.popup({window:remote.getCurrentWindow()})\n})\n")])])]),t("h2",{attrs:{id:"通过链接打开浏览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过链接打开浏览器"}},[n._v("#")]),n._v(" 通过链接打开浏览器")]),n._v(" "),t("p",[n._v("在渲染进程中默认加入一个 a 标签，进行跳转默认是直接在窗口中打开，而不是在浏览器中打开的。\n代码如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <a href="https://www.baidu.com">123</a>\n</body>\n</html>\n')])])]),t("p",[n._v("可以看到这个跳转是在页面内的跳转，那么我们来看看如何通过打开浏览器。")]),n._v(" "),t("h5",{attrs:{id:"使用-shell-在浏览器打开"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-shell-在浏览器打开"}},[n._v("#")]),n._v(" 使用 shell 在浏览器打开")]),n._v(" "),t("ol",[t("li",[n._v("创建 index4.js")])]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- shell通过链接打开浏览器 --\x3e\n    <a id="aHref" href="https://www.baidu.com">123</a>\n\n    <script src="./js/index4.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index4.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 通过链接打开浏览器\nconst { shell } = require('electron');\n\nconst aHref = document.getElementById('aHref');\n\naHref.onclick = (e)=>{\n    // 阻止默认事件 因为默认是在应用中打开;\n    e.preventDefault();\n    // 获取链接\n    const href = aHref.getAttribute('href');\n    // 浏览器中打开\n    shell.openExternal(href)\n}\n")])])]),t("h2",{attrs:{id:"嵌入网页和打开子窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌入网页和打开子窗口"}},[n._v("#")]),n._v(" 嵌入网页和打开子窗口")]),n._v(" "),t("p",[n._v("既然是嵌入网页，那当然是主进程中进行嵌入")]),n._v(" "),t("h5",{attrs:{id:"browserview-键入网页到应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#browserview-键入网页到应用"}},[n._v("#")]),n._v(" BrowserView 键入网页到应用")]),n._v(" "),t("ol",[t("li",[n._v("打开主进程"),t("code",[n._v("main.js")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { app, BrowserWindow, BrowserView } = require(\"electron\");\nlet mainWindow = null;\nrequire('./main/menu')\n\napp.on(\"ready\", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      enableRemoteModule: true,\n    },\n  });\n  mainWindow.webContents.openDevTools()\n  mainWindow.loadFile(require('path').join(__dirname, './render/index.html'));\n\n  const viewWindow = new BrowserView(); // 定义实例\n  mainWindow.setBrowserView(viewWindow); // 主窗口设置viewWindw可用\n  viewWindow.setBounds({x:0,y:150,width: 600,height:600});\n  viewWindow.webContents.loadURL('https://www.baidu.com')\n\n  mainWindow.on(\"close\", () => {\n    mainWindow = null;\n  });\n});\n")])])]),t("p",[n._v("上面通过 BowserView 嵌入网页，\n下面来看看 window.open 打开子窗口")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 打开子窗口--\x3e\n    <button id="btn">打开子窗口 </button>\n\n    <script src="./js/index5.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index5.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 创建子窗口\nconst btn = document.getElementById('btn');\nbtn.onclick = ()=>{\n    window.open('child.html')\n}\n")])])]),t("h2",{attrs:{id:"window-open-子窗口和父窗口之间的通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#window-open-子窗口和父窗口之间的通信"}},[n._v("#")]),n._v(" window.open 子窗口和父窗口之间的通信")]),n._v(" "),t("p",[t("code",[n._v("window.opener.postMessage(message,targetOrigin)")]),n._v(",是将消息发送给指定来源的父窗口，如果未指定来源则发送给"),t("code",[n._v("*")]),n._v("，即所有窗口。")]),n._v(" "),t("ol",[t("li",[n._v("创建了"),t("code",[n._v("child.html")]),n._v(" "),t("code",[n._v("index6.js")])])]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 子窗口父窗口通信 --\x3e\n    <button id="btn">打开子窗口 </button>\n    <div id="message"></div>\n\n    <script src="./js/index5.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("child.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <div>我是子窗口</div>\n    <button id="btn">传递数据</button>\n    <script src="./js/index6.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index5.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 创建子窗口\nconst btn = document.getElementById('btn');\nbtn.onclick = ()=>{\n    window.open('child.html')\n}\n\n// 子窗口与父窗口通信\nconst message = document.getElementById('message')\nwindow.addEventListener('message',msg => {\n    console.log(msg)\n    message.innerHTML = msg.data\n})\n")])])]),t("p",[t("code",[n._v("index6.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 子窗口发来信息\nconst btn = document.getElementById('btn');\nbtn.onclick = ()=>{\n    window.opener.postMessage('子窗口发来信息')\n}\n")])])]),t("h2",{attrs:{id:"选择文件对话框"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择文件对话框"}},[n._v("#")]),n._v(" 选择文件对话框")]),n._v(" "),t("p",[n._v("我看看打开文件对话框的 API 是什么"),t("code",[n._v("dialog.showOpenDialog()")]),n._v(",\n这个方法可以接收两个参数，一个是基本的属性设置，一个是回调函数，如果异步可以使用"),t("code",[n._v("then")]),n._v("\n基本设置有")]),n._v(" "),t("ul",[t("li",[n._v("title：对话框名字")]),n._v(" "),t("li",[n._v("defaultPath: 默认打开路径")]),n._v(" "),t("li",[n._v("buttonLabel: 确认按钮的自定义标签、若为空则使用默认标签")]),n._v(" "),t("li",[n._v("filters: 文件选择器，定义后可以对文件类型进行筛选")]),n._v(" "),t("li",[n._v("properties: 打开文件的属性，如：能否多选，选择文件的类型等")])]),n._v(" "),t("p",[n._v("下面来看看代码")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body\n    \x3c!-- 打开文件 --\x3e\n    <button id="btn">打开文件</button>\n\n\n    <script src="./js/index7.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index7.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 选择文件对话框\nconst {dialog} = require('electron').remote;\nconst btn = document.getElementById('btn')\n\nbtn.onclick = () =>{\n    dialog.showOpenDialog({\n        title:'请选择你需要的文件',   // 对话框标题\n        defaultPath: '默认路径',     // 默认打开路径\n        filters:[                   // 文件选择过滤\n            {\n                name:'jpg',\n                extensions:['jpg']\n            }\n        ],\n        buttonLabel:'是否确认',\n        properties: ['openFile', 'multiSelections']   // 对话框使用的功能，允许选择文件、允许多选\n    }).then(res => {\n        console.log(res)\n    }).catch(err=>{\n        console.log(err)\n    })\n}\n")])])]),t("h2",{attrs:{id:"保存对话框的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保存对话框的操作"}},[n._v("#")]),n._v(" 保存对话框的操作")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 保存对话框 --\x3e\n    <button id="btn">保存对话框</button>\n    <script src="./js/index8.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index8.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 选择文件\nconst btn = document.getElementById('btn');\nconst fs = require('fs');\nconst {dialog} = require('electron').remote;\nbtn.onclick = ()=>{\n    dialog.showSaveDialog({\n        title: '选择文件'\n    }).then(res => {\n        console.log(res);\n        fs.writeFileSync(res.filePath, '你好啊');\n    }).catch(err =>{\n        console.log(err)\n    })\n}\n")])])]),t("p",[n._v("当打开窗口输入文件名后会在对应的文件夹下创建相对于的文件，我们通过 node.js 的 fs 对相应的文件进行操作，写入了"),t("code",[n._v("你好啊")])]),n._v(" "),t("blockquote",[t("p",[n._v("注意 保存文件是 dialog.showSaveDialog")])]),n._v(" "),t("h2",{attrs:{id:"消息对话框-制作一个确认对话框"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息对话框-制作一个确认对话框"}},[n._v("#")]),n._v(" 消息对话框（制作一个确认对话框）")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 消息对话框 --\x3e\n    <button id="btn">打开消息对话框</button>\n    <script src="./js/index9.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index9.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 消息对话框\nconst btn = document.getElementById("btn");\nconst { dialog } = require(\'electron\').remote\n\nbtn.onclick = () => {\n    dialog.showMessageBox({\n    type: "warning",\n    title: "警告",\n    message: "这是一个警告对话框",\n    buttons: ["知道了", "无所谓"],\n  }).then(res => {\n      console.log(res)\n  });\n};\n')])])]),t("h2",{attrs:{id:"断网提醒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#断网提醒"}},[n._v("#")]),n._v(" 断网提醒")]),n._v(" "),t("p",[n._v("通过"),t("code",[n._v("window.addEventListener")]),n._v("进行监听"),t("code",[n._v("online")]),n._v(" "),t("code",[n._v("offline")]),n._v("判断网络是否正常")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 断网提醒 --\x3e\n    <div>断网提醒</div>\n\n    <script src="./js/index10.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index10.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 断网提醒\nwindow.addEventListener('online',()=>{\n    alert('网络正常，放心使用')\n})\n\nwindow.addEventListener('offline',()=>{\n    alert('网络异常，请检查网络是否连接')\n})\n")])])]),t("blockquote",[t("p",[n._v("注意：运行 electon 后不会有反应，先进行断网，在对网络进行连接即可看到效果")])]),n._v(" "),t("h2",{attrs:{id:"底部通知消息提醒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#底部通知消息提醒"}},[n._v("#")]),n._v(" 底部通知消息提醒")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 底部通知消息提醒 --\x3e\n    <button id="btn">通知消息</button>\n\n    <script src="./js/index11.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index11.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 底部消息提醒\nconst btn = document.getElementById('btn')\n\nconst option = {\n    title: '新消息提醒',\n    body: '你有新的消息提醒'\n}\nbtn.onclick = ()=>{\n    new window.Notification(option.title,option)\n}\n")])])]),t("h2",{attrs:{id:"注册全局快捷键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册全局快捷键"}},[n._v("#")]),n._v(" 注册全局快捷键")]),n._v(" "),t("p",[n._v("全局快捷加的注册是使用"),t("code",[n._v("globalShortcut")]),n._v(","),t("code",[n._v("globalShortcut")]),n._v("是主线程的模块，因此写在"),t("code",[n._v("main.js")]),n._v("中")]),n._v(" "),t("p",[t("code",[n._v("main.js")]),n._v(" 完整代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { app, BrowserWindow, BrowserView, globalShortcut } = require(\"electron\");\nlet mainWindow = null;\nrequire('./main/menu')\n\napp.on(\"ready\", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      enableRemoteModule: true,\n    },\n  });\n  globalShortcut.register('ctrl+y',()=>{\n    mainWindow.loadURL('https://www.baidu.com')\n  })\n  globalShortcut.register('ctrl+z',()=>{\n    mainWindow.loadFile(require('path').join(__dirname, './render/index.html'))\n  })\n  mainWindow.webContents.openDevTools()\n  mainWindow.loadFile(require('path').join(__dirname, './render/index.html'));\n\n  // const viewWindow = new BrowserView(); // 定义实例\n  // mainWindow.setBrowserView(viewWindow); // 主窗口设置viewWindw可用\n  // viewWindow.setBounds({x:0,y:150,width: 600,height:600});\n  // viewWindow.webContents.loadURL('https://www.baidu.com')\n\n  mainWindow.on(\"close\", () => {\n    mainWindow = null;\n  });\n});\n")])])]),t("p",[n._v("通过"),t("code",[n._v("globalShortcut.isRegistered()")]),n._v("判断全局快捷键是否注册成，可以打开多个软件进行测试")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { app, BrowserWindow, BrowserView, globalShortcut } = require(\"electron\");\nlet mainWindow = null;\nrequire('./main/menu')\n\napp.on(\"ready\", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      enableRemoteModule: true,\n    },\n  });\n  globalShortcut.register('ctrl+y',()=>{\n    let isRegister = globalShortcut.isRegistered(`ctrl+y`)?'true':'false'\n    console.log(isRegister)\n    mainWindow.loadURL('https://www.baidu.com')\n  })\n  globalShortcut.register('ctrl+z',()=>{\n    mainWindow.loadFile(require('path').join(__dirname, './render/index.html'))\n  })\n  mainWindow.webContents.openDevTools()\n  mainWindow.loadFile(require('path').join(__dirname, './render/index.html'));\n\n  // const viewWindow = new BrowserView(); // 定义实例\n  // mainWindow.setBrowserView(viewWindow); // 主窗口设置viewWindw可用\n  // viewWindow.setBounds({x:0,y:150,width: 600,height:600});\n  // viewWindow.webContents.loadURL('https://www.baidu.com')\n\n  mainWindow.on(\"close\", () => {\n    mainWindow = null;\n  });\n});\n")])])]),t("h2",{attrs:{id:"注销快捷键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注销快捷键"}},[n._v("#")]),n._v(" 注销快捷键")]),n._v(" "),t("p",[n._v("因为是全局快捷键所以页面关闭记得注销快捷键")]),n._v(" "),t("p",[n._v("下面是注册快捷键、 判断快捷键是否注册成功、注销快捷键")]),n._v(" "),t("p",[t("code",[n._v("main.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { app, BrowserWindow, BrowserView, globalShortcut } = require(\"electron\");\nlet mainWindow = null;\nrequire('./main/menu')\n\napp.on(\"ready\", () => {\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      enableRemoteModule: true,\n    },\n  });\n  globalShortcut.register('ctrl+y',()=>{\n    let isRegister = globalShortcut.isRegistered(`ctrl+y`)?'true':'false'\n    console.log(isRegister)\n    mainWindow.loadURL('https://www.baidu.com')\n  })\n  globalShortcut.register('ctrl+z',()=>{\n    mainWindow.loadFile(require('path').join(__dirname, './render/index.html'))\n  })\n  mainWindow.webContents.openDevTools()\n  mainWindow.loadFile(require('path').join(__dirname, './render/index.html'));\n\n  // const viewWindow = new BrowserView(); // 定义实例\n  // mainWindow.setBrowserView(viewWindow); // 主窗口设置viewWindw可用\n  // viewWindow.setBounds({x:0,y:150,width: 600,height:600});\n  // viewWindow.webContents.loadURL('https://www.baidu.com')\n\n  mainWindow.on(\"close\", () => {\n    mainWindow = null;\n  });\n\n});\n\n// 注销快捷键\n\napp.on('will-quie',()=>{\n  globalShortcut.unregister('ctrl+y');\n  globalShortcut.unregister('ctrl+z');\n  globalShortcut.unregisterAll()\n\n})\n")])])]),t("h2",{attrs:{id:"剪切板事件使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#剪切板事件使用"}},[n._v("#")]),n._v(" 剪切板事件使用")]),n._v(" "),t("p",[n._v("通过 "),t("code",[n._v("clipboard")]),n._v("模块实现")]),n._v(" "),t("p",[t("code",[n._v("index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- 剪切板  复制--\x3e被复制的信息\n    <div>\n        复制信息: <span id="message">被复制的信息</span><button id="btn">点击复制</button>\n    </div>\n\n    <script src="./js/index12.js"><\/script>\n</body>\n</html>\n')])])]),t("p",[t("code",[n._v("index12.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 剪切板\nconst btn = document.getElementById('btn');\nconst message = document.getElementById('message');\nconst { clipboard } = require('electron');\nbtn.onclick = ()=>{\n    clipboard.writeText(message.innerHTML)\n    alert('复制成功')\n}\n")])])]),t("h2",{attrs:{id:"打包桌面应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打包桌面应用"}},[n._v("#")]),n._v(" 打包桌面应用")]),n._v(" "),t("p",[n._v("这里只进行 windows 的打包测试")]),n._v(" "),t("p",[t("code",[n._v("npm install electron-builder --save-dev")]),n._v("\\")]),n._v(" "),t("p",[n._v("安装完成以后在"),t("code",[n._v("package.json")]),n._v("文件中的 scrit 内添加一个属性")]),n._v(" "),t("blockquote",[t("p",[n._v('"build": "electron-builder --win --x64"')])]),n._v(" "),t("p",[n._v("执行 "),t("code",[n._v("npm run build")]),n._v(" 即可进行打包")]),n._v(" "),t("p",[n._v("代码可查看 https://github.com/barntet/electron")])])}),[],!1,null,null,null);e.default=i.exports}}]);