(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{366:function(a,t,e){"use strict";e.r(t);var r=e(42),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"js-常见的对象与数组之间的转换你都知道吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-常见的对象与数组之间的转换你都知道吗"}},[a._v("#")]),a._v(" js 常见的对象与数组之间的转换你都知道吗？")]),a._v(" "),e("p",[a._v("最近公司项目重构，看了看之前的代码发现很多因为数据结构导致的问题，可是没办法啊，打工个人。所以总结了一些平时开发中对象与数组常用的方法与它们之间相互转换的方法。")]),a._v(" "),e("h1",{attrs:{id:"数组转对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组转对象"}},[a._v("#")]),a._v(" 数组转对象")]),a._v(" "),e("h3",{attrs:{id:"展开运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#展开运算符"}},[a._v("#")]),a._v(" 展开运算符 (...)")]),a._v(" "),e("p",[a._v("这是一个简单快速的方法")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = ['one','two','three'];\nconst obj = {...arr};\nconsole.log(obj);    // { 0: 'one', 1: 'tow', 2: 'three' }\n\n")])])]),e("h3",{attrs:{id:"objcet-assign-target-sources"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objcet-assign-target-sources"}},[a._v("#")]),a._v(" Objcet.assign(target, ...sources)")]),a._v(" "),e("p",[a._v("将所有可枚举属性的值从一个或多个源对象分配到目标对象")]),a._v(" "),e("p",[a._v("参数： target：目标对象、...sources：源对象")]),a._v(" "),e("p",[a._v("返回值：目标对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = ['one','two','three'];\nconst obj = Object.assign({}, arr);\nconsole.log(obj);       // { 0: 'one', 1: 'tow', 2: 'three' }\n")])])]),e("h3",{attrs:{id:"object-fromentries-iterable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-fromentries-iterable"}},[a._v("#")]),a._v(" Object.fromEntries(iterable)")]),a._v(" "),e("p",[a._v("把键值对转换为一个对象。")]),a._v(" "),e("p",[a._v("参数：类似 Array、Map")]),a._v(" "),e("p",[a._v("返回值：由该迭代对象条目提供对应属性的新对象")]),a._v(" "),e("p",[a._v("当我们遇到如下的结构时我们可以很轻松的将这个数组转换为对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = [ ['a', 1], ['b', 2], ['c', 3] ];\nconst obj = Object.fromEntries(arr);\nconsole.log(obj);    // { a:1 , b: 2, c: 3 }\n\n")])])]),e("h3",{attrs:{id:"foreach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[a._v("#")]),a._v(" forEach")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = [1,2,3,4,5];\nlet obj = {};\n\narr.forEach((item,index) => {\n    obj[index] = item;\n})\n\nconsole.log(obj);     //{ 0: 1, 1: 2, 2: 3, 3: 4, 4: 5 }\n\n")])])]),e("h1",{attrs:{id:"对象转数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转数组"}},[a._v("#")]),a._v(" 对象转数组")]),a._v(" "),e("h3",{attrs:{id:"object-entries-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-entries-obj"}},[a._v("#")]),a._v(" Object.entries(obj)")]),a._v(" "),e("p",[a._v("把一个键值对转换为数组")]),a._v(" "),e("p",[a._v("参数： 可以返回其自身可枚举属性的键值对的对象")]),a._v(" "),e("p",[a._v("返回值：返回一个其自身可枚举属性的键值对数组")]),a._v(" "),e("p",[a._v("当我们遇到如下的结构时我们可以很轻松的将这个对象转换为数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const obj = { a:1 , b: 2, c: 3 };\nconst arr = Object.entries(obj);\nconsole.log(arr);   // [ ['a', 1], ['b', 2], ['c', 3] ]\n\n")])])]),e("h3",{attrs:{id:"object-keys-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-obj"}},[a._v("#")]),a._v(" Object.keys(obj)")]),a._v(" "),e("p",[a._v("由给定的对象自身可枚举的属性组成的数组")]),a._v(" "),e("p",[a._v("参数：对象")]),a._v(" "),e("p",[a._v("返回值：给定对象的属性组成的字符串数组")]),a._v(" "),e("p",[a._v("通常会配合一些数组的方法使用，如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const obj = { a:1 , b: 2, c: 3 };\nconst arr = Object.keys(obj).map(item => obj[item]);\nconsole.log(arr);  // [1, 2, 3];\n\n也可以得到上面那样的结果\n\nconst arr = Object.keys(obj).map(item => [item, lobj[item]]);\nconsole.log(arr);  // [ ['a', 1], ['b', 2], ['c', 3] ]\n\n")])])]),e("h3",{attrs:{id:"object-values-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-values-obj"}},[a._v("#")]),a._v(" Object.values(obj)")]),a._v(" "),e("p",[a._v("由给定的对象自身可枚举的属性值组成的数组")]),a._v(" "),e("p",[a._v("参数：对象")]),a._v(" "),e("p",[a._v("返回值：给定对象的属性值组成的字符串数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const obj = { a:1 , b: 2, c: 3 };\nconst arr = Object.values(obj);\nconsole.log(arr);  // [1, 2, 3];\n\n")])])]),e("h3",{attrs:{id:"array-from-array-fn-this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-from-array-fn-this"}},[a._v("#")]),a._v(" Array.from(array, fn, this)")]),a._v(" "),e("p",[a._v("从一个类似数组对象或可迭代对象创建一个新的，浅拷贝的数组实例。")]),a._v(" "),e("p",[a._v("参数：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("array：要变换成数组的为数组对象或可迭代对象\n\nfn: 指定了该参数，新数组中的每个元素都会执行该回调函数\n\nthis: 执行回调函数时的this对象\n")])])]),e("p",[a._v("返回值：一个新的数组实例")]),a._v(" "),e("p",[a._v("先来说说什么是类似数组：就是含有 length 和索引属性的对象，如下就是一个简单的类似数组对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const obj = {\n    0: 'name',\n    1: 'age',\n    2: 'sex',\n    3: 'height'\n    length: 3,\n}\n")])])]),e("blockquote",[e("p",[a._v("注意：类似数组对象的"),e("code",[a._v("length")]),a._v("的值，决定了返回数组的长度")])]),a._v(" "),e("p",[a._v("什么是可迭代对象：Array、Set、Map 和字符串都是可迭代对象，更直接的是在控制台上看看当前的对象的原型链上是否有 "),e("code",[a._v("Symbol")]),a._v("的方法 ，看看下面通过生成器创建的可迭代对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const obj = {\n    0: 'name',\n    1: 'age',\n    2: 'sex',\n    3: 'height',\n}\n\nfunction *createIterator(obj){\n    for(let value in obj){\n        yield obj[value];\n    }\n}\n\nlet iterator = createIterator(obj);\n\n")])])]),e("p",[a._v("好的，我们来试试用 Array.from 创建一个数组吧。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("类似数组对象\n\nconst obj = {\n    0: 'name',\n    1: 'age',\n    2: 'sex',\n    3: 'height',\n    length: 3,\n}\n\nconst arr = Array.from(obj);\n\nconsole.log(arr);    //['name', 'age', 'sex' ];\n\n输出3个是因为上面说的length的长度决定了数组的长度\n\n\n可迭代对象\n\nconst obj2 = {\n    0: 'name',\n    1: 'age',\n    2: 'sex',\n    3: 'height'\n}\n\nfunction *createIterator(obj){\n    for(let value in obj){\n        yield obj[value];\n    }\n}\n\nlet iterator = createIterator(obj);\n\nconst arr2 = Arry.from(iterator);\n\nconsole.log(arr2);    //['name', 'age', 'sex', 'height' ];\n\n")])])]),e("p",[a._v("以上就是常见的一些数组与对象之间转换的方法，有不好的地点就要麻烦大家指出了，既然都看到最后了不如动手试一试这些方法吧。")])])}),[],!1,null,null,null);t.default=s.exports}}]);