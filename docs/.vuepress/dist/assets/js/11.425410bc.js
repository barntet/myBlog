(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{365:function(t,a,v){"use strict";v.r(a);var _=v(42),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"为什么-javascript-会精度丢失"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么-javascript-会精度丢失"}},[t._v("#")]),t._v(" 为什么 JavaScript 会精度丢失")]),t._v(" "),v("p",[t._v("javaScript 中臭名昭著的 BUG 就是"),v("code",[t._v("0.1+0.2 !== 0.3")]),t._v("，因为精度问题，导致所有浮点数运算都是不安全的。")]),t._v(" "),v("p",[t._v("正如下面的计算结果，它们并不是我们所预想的：")]),t._v(" "),v("blockquote",[v("p",[t._v("0.1 + 0.2 = 0.30000000000000004")])]),t._v(" "),v("blockquote",[v("p",[t._v("1 - 0.9 = 0.09999999999999998")])]),t._v(" "),v("p",[t._v("虽然很多人知道这个浮点数误差这个问题的，可是却不知道背后的原理以及解决方案。今天我们就通过上面两个例子看看 JavaScript 浮点数误差问题背后的原理以及解决方案吧！")]),t._v(" "),v("p",[t._v("那我们先来看看本文将包含什么内容")]),t._v(" "),v("ol",[v("li",[t._v("为什么 JavaScript 的所有数值都统称为 Number")]),t._v(" "),v("li",[t._v("是什么导致的浮点数计算误差问题（IEEE 754 是什么）")]),t._v(" "),v("li",[t._v("那遇到浮点数计算应该如何解决")]),t._v(" "),v("li",[t._v("最后讲讲 JavaScript 值的范围")])]),t._v(" "),v("h1",{attrs:{id:"为什么-javascript-中所有的数值类型都称为-number-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么-javascript-中所有的数值类型都称为-number-类型"}},[t._v("#")]),t._v(" 为什么 JavaScript 中所有的数值类型都称为 Number 类型")]),t._v(" "),v("p",[t._v("我们通过 ECMAScript 看看。")]),t._v(" "),v("blockquote",[v("p",[t._v("在 ECMAScript 标准中我们可以看到对 Number 类型的定义是这样的，使用 IEEE 754 格式表示整数和浮点值(JavaScript 使用的是 64 位，也就是常说的'双精度')。")])]),t._v(" "),v("p",[t._v("那为什么呢？因为存储浮点值是存储整数值的两倍，因此 ECMAScript 总是想方设法把把值转换位整数。这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。")]),t._v(" "),v("h1",{attrs:{id:"什么导致浮点数计算的误差问题-ieee-754-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么导致浮点数计算的误差问题-ieee-754-是什么"}},[t._v("#")]),t._v(" 什么导致浮点数计算的误差问题？IEEE 754 是什么？")]),t._v(" "),v("p",[t._v("因为 JavaScript 中是遵循 IEEE 754 的标准，在程序的内部 Number 类型实质是一个 64 位固定长度的浮点数，也就是标准的 double 双精度浮点数。")]),t._v(" "),v("p",[t._v("IEEE 754 是 IEEE 二进制浮点数算数标准。格式如下")]),t._v(" "),v("blockquote",[v("p",[t._v("V = (-1)^s "),v("em",[t._v("（1+M）")]),t._v(" 2^(E-127)（单精度）")])]),t._v(" "),v("blockquote",[v("p",[t._v("V = (-1)^s "),v("em",[t._v("（1+M）")]),t._v(" 2^(E-1023)（双精度）")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://note.youdao.com/favicon.ico",alt:"IEEE 754"}})]),t._v(" "),v("p",[t._v("那我们来看看十进制的数值是如何按照 IEEE 754 进行转换的")]),t._v(" "),v("p",[t._v("十进制小数 3.14 转换二进制\n3.14 = 11.001000111101011100001010001111010111000010100011111 = 1.1001000111101011100001010001111010111000010100011111 x 2"),v("sup",[t._v("1")])]),t._v(" "),v("p",[t._v("根据上面的公式")]),t._v(" "),v("p",[t._v("符号位：0")]),t._v(" "),v("p",[t._v("阶码部分：64 位为例，1023+（1）= 1024，二进制就是 10000000000")]),t._v(" "),v("p",[t._v("尾数部分：")]),t._v(" "),v("blockquote",[v("p",[t._v("64 位为例，应为 52 位，1001000111101011100001010001111010111000010100011111")])]),t._v(" "),v("p",[t._v("结果为 ：0100000000001001000111101011100001010001111010111000010100011111\n刚好 64 位，大家可以数数。")]),t._v(" "),v("p",[t._v("再来说说为什么阶码那里要用 1023+1 呢？\n因为 E 在 64 位的时候为 11 位，转换 10 进制也就是 2047，但是 IEEE 754 又规定要减去中间值，也就是 1023，所以上面就是 "),v("code",[t._v("1023+1")])]),t._v(" "),v("h1",{attrs:{id:"那如果遇到浮点数的计算问题该怎么办呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#那如果遇到浮点数的计算问题该怎么办呢"}},[t._v("#")]),t._v(" 那如果遇到浮点数的计算问题该怎么办呢？")]),t._v(" "),v("h4",{attrs:{id:"一、类库部分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、类库部分"}},[t._v("#")]),t._v(" 一、类库部分")]),t._v(" "),v("h5",{attrs:{id:"math-js"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#math-js"}},[t._v("#")]),t._v(" Math.js")]),t._v(" "),v("p",[t._v("math.js 是 JavaScript 和 Node.js 的一个广泛的数学库。支持数字、大数、分数、单位和矩阵数据类型的运算。")]),t._v(" "),v("p",[t._v("官网：https://mathjs.org/")]),t._v(" "),v("p",[t._v("GitHub：https://github.com/josdejong/mathjs")]),t._v(" "),v("p",[t._v("经典问题 "),v("code",[t._v("0.1+0.2")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("var math = require('mathjs');\nconsole.log(math.add(0.1,0.2));   //0.30000000000000004\nconsole.log(math.format((math.add(math.bignumber(0.1),math.bignumber(0.2))))); //'0.3\n\n")])])]),v("h5",{attrs:{id:"big-js"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#big-js"}},[t._v("#")]),t._v(" big.js")]),t._v(" "),v("p",[t._v("用于任意精度的十进制算术的小型 JavaScript 库")]),t._v(" "),v("p",[t._v("Github :https://github.com/MikeMcl/big.js/")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("var Big = require(\"big.js\");\nx = new Big(0.1);\ny = 0.2;\nconsole.log(x.plus(y).toString())//'0.3'\n")])])]),v("h4",{attrs:{id:"二、原生方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、原生方法"}},[t._v("#")]),t._v(" 二、原生方法")]),t._v(" "),v("h5",{attrs:{id:"number-prototype-tofixed"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tofixed"}},[t._v("#")]),t._v(" Number.prototype.toFixed()")]),t._v(" "),v("p",[t._v("toFixed()方法是使用定点表示法格式化一个值，对结果进行四舍五入\ntoFixed(),精度必须在 0-20 之间")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("parseFloat((0.1+0.2).toFixed(10)); //0.3\nparseFloat((0.3/0.1).toFixed(10)); //3\nparseFloat((1-0.9).toFixed(10));   //0.1\n")])])]),v("h1",{attrs:{id:"值的范围"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#值的范围"}},[t._v("#")]),t._v(" 值的范围")]),t._v(" "),v("p",[t._v("由于内存的限制，ECMAScript 并不支持表示这个世界上所有的数值。\nECMAScript 可以表示的最小值保存在"),v("code",[t._v("Number.MIN_VALUE")]),t._v("中,这个值在浏览器是"),v("code",[t._v("5e-423")]),t._v("；可以表示的最大值保存在"),v("code",[t._v("Number.MAX_VALUE")]),t._v("中，这个值在浏览器中是"),v("code",[t._v("1.7976931348623157e+308")]),t._v("。")]),t._v(" "),v("p",[t._v("简单介绍了以后,来说说为什么要说值的范围。")]),t._v(" "),v("p",[t._v("因为还有两个值没有说，")]),t._v(" "),v("p",[v("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("最大安全整数")]),t._v(" "),v("p",[v("code",[t._v("Number.MIN_SAFE_INTEGER")]),t._v("最小安全整数")]),t._v(" "),v("p",[t._v("其实上面我们说了那么多都是再说精度丢失，但是最根本的原因在于哪，就是因为有范围的限制。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Number.MAX_SAFE_INTEGER // 9007199254740991\n\n1111111111111111+22222222222222222 = 23333333333333336\n\n当我们的数值超过了值的范围进行操作就会出现精度的丢失\n")])])]),v("p",[t._v("那为什么要存在他们呢?因为在此范围内整数和双精度浮点数是一一对应的，不存在一个整数有多个浮点数的情况，当然也不会又一个浮点数对应多个整数的情况。")])])}),[],!1,null,null,null);a.default=e.exports}}]);